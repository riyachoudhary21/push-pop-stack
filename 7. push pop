ALGORITHM:-
     1.PUSH
1.	START
2.	Store the element to push into array
3.	Check if top== (MAXSIZE-1) then stack is full else goto step 4
4.	Increment top as top = top+1
5.	Add element to the position stk[top]=num
6.	STOP
       2.POP
1.	START
2.	Check if top== (-1) then stack is empty else goto step 4
3.	Access the element top is pointing num = stk[top];
4.	Decrease the top by 1 top = top-1;
5.	STOP

CODE:-
#include<stdio.h>
#define SIZE 10
void push(int);
void pop();
void display();
int stack[SIZE], top = -1; 
void main()
{
   int value, choice;   
   while(1){
      printf("\n\n MENU \n");
      printf("1. Push\n2. Pop\n3. Display\n4. Exit");
      printf("\nEnter your choice: ");
      scanf("%d",&choice);
      switch(choice){
	 case 1: printf("Enter the value to be insert: ");
		 scanf("%d",&value);
		 push(value);
		 break;
	 case 2: pop();
		 break;
	 case 3: display();
		 break;
	 case 4: exit(0);
	 default: printf("\nWrong selection! Try again!");
      }
   }
}
void push(int value){
   if(top == SIZE-1)
      printf("\nStack is Full! Insertion is not possible!");
   else{
      top++;
      stack[top] = value;
      printf("\nInsertion success!");
   }
}
void pop(){
   if(top == -1)
      printf("\nStack is Empty! Deletion is not possible!");
   else{
      printf("\nDeleted : %d", stack[top]);
      top--;
   }
}
void display(){
   if(top == -1)
      printf("\nStack is Empty!!!");
   else{
      int i;
      printf("\nStack elements are:\n");
      for(i=top; i>=0; i--)
	 printf("%d\n",stack[i]);
   }
}
